type REPORTED {
  createdAt: String
  reasonCategory: ReasonCategory
  reasonDescription: String
  submitter: User
    @cypher(statement: "MATCH (resource)<-[:REPORTED]-(user:User) RETURN user")
  # not yet supported
  # resource: ReportReource
  #   @cypher(statement: "MATCH (resource)<-[:REPORTED]-(user:User) RETURN resource")
  resourceId: ID
    @cypher(statement: "MATCH (resource)<-[:REPORTED]-(user:User) RETURN resource {.id}")
  type: String
    @cypher(statement: "MATCH (resource)<-[:REPORTED]-(user:User) RETURN labels(resource)[0]")
  user: User
  post: Post
  comment: Comment
}

# list see "reportReasonCategoriesDatabaseList" in shared file "shared/moderation/report.js"
enum ReasonCategory {
  other
  discrimination-etc
  pornographic-content-links
  glorific-trivia-of-cruel-inhuman-acts
  doxing
  intentional-intimidation-stalking-persecution
  advert-products-services-commercial
  criminal-behavior-violation-german-law
}

# not yet supported
# union ReportReource = User | Post | Comment

enum ReportOrdering {
  createdAt_desc
}

type Query {
  reports(orderBy: ReportOrdering): [REPORTED]
}

type Mutation {
  report(resourceId: ID!, reasonCategory: String!, reasonDescription: String!): REPORTED
}
